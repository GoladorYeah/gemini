package parser

import (
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	"pricerunner-parser/internal/config"
	"pricerunner-parser/internal/downloader"
	"pricerunner-parser/internal/models"
	"pricerunner-parser/internal/storage"

	"github.com/playwright-community/playwright-go"
)

// Parser handles the main parsing logic
type Parser struct {
	config     *config.Config
	storage    storage.Storage
	downloader *downloader.ImageDownloader
	playwright *playwright.Playwright
	browser    playwright.Browser
}

// New creates a new parser instance
func New(cfg *config.Config, store storage.Storage) *Parser {
	return &Parser{
		config:     cfg,
		storage:    store,
		downloader: downloader.NewImageDownloader(cfg.Storage.ImagesDir),
	}
}

// Parse starts the parsing process
func (p *Parser) Parse() error {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Playwright
	if err := p.initPlaywright(); err != nil {
		return fmt.Errorf("failed to init playwright: %w", err)
	}
	defer p.cleanup()

	var allProducts []models.Product
	pageNumber := 1
	maxPages := p.config.Parser.Parsing.MaxPages

	// –ï—Å–ª–∏ maxPages = 0, —Å—Ç–∞–≤–∏–º —Ä–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç —á—Ç–æ–±—ã –Ω–µ —É—Ö–æ–¥–∏—Ç—å –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
	if maxPages == 0 {
		maxPages = 50 // –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
	}

	for pageNumber <= maxPages {
		log.Printf("\n=== Processing page %d ===", pageNumber)

		// –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		basicProducts, hasNextPage, err := p.parseProductList(pageNumber)
		if err != nil {
			log.Printf("Failed to parse page %d: %v", pageNumber, err)
			break
		}

		if len(basicProducts) == 0 {
			log.Printf("No products found on page %d, stopping", pageNumber)
			break
		}

		log.Printf("Found %d products on page %d", len(basicProducts), pageNumber)

		// –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
		newProducts, err := p.filterExistingProducts(basicProducts)
		if err != nil {
			log.Printf("Warning: failed to filter existing products: %v", err)
			newProducts = basicProducts // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ –≤—Å–µ–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
		}

		log.Printf("New products to process: %d", len(newProducts))

		// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		detailedProducts := p.parseProductDetails(newProducts)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		if len(detailedProducts) > 0 {
			if err := p.storage.SaveProducts(detailedProducts, pageNumber); err != nil {
				log.Printf("Warning: failed to save page %d: %v", pageNumber, err)
			}
			allProducts = append(allProducts, detailedProducts...)
		}

		log.Printf("=== Page %d completed: %d products processed ===", pageNumber, len(detailedProducts))

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
		if !hasNextPage {
			log.Printf("No more pages available, stopping at page %d", pageNumber)
			break
		}

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		pageNumber++
		log.Printf("Moving to page %d...", pageNumber)
		time.Sleep(time.Duration(p.config.Parser.Parsing.DelayBetweenRequests) * time.Millisecond)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if len(allProducts) > 0 {
		if err := p.storage.SaveFinalData(allProducts); err != nil {
			return fmt.Errorf("failed to save final data: %w", err)
		}

		log.Printf("\nüéâ PARSING COMPLETED SUCCESSFULLY!")
		log.Printf("üìä Total processed: %d products across %d pages", len(allProducts), pageNumber-1)

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
		withPrices := 0
		withImages := 0
		withFeatures := 0

		for _, product := range allProducts {
			if product.Price != nil && product.Price.PriceEUR > 0 {
				withPrices++
			}
			if product.ImageLocal != "" {
				withImages++
			}
			if len(product.Features) > 0 {
				withFeatures++
			}
		}

		log.Printf("üí∞ Products with prices: %d/%d", withPrices, len(allProducts))
		log.Printf("üñºÔ∏è  Products with images: %d/%d", withImages, len(allProducts))
		log.Printf("‚öôÔ∏è  Products with features: %d/%d", withFeatures, len(allProducts))
	}

	return nil
}

// initPlaywright initializes Playwright browser
func (p *Parser) initPlaywright() error {
	pw, err := playwright.Run()
	if err != nil {
		return err
	}
	p.playwright = pw

	browser, err := pw.Chromium.Launch(playwright.BrowserTypeLaunchOptions{
		Headless: &p.config.Parser.Browser.Headless,
		Args: []string{
			"--disable-blink-features=AutomationControlled",
			"--no-sandbox",
			"--disable-setuid-sandbox",
		},
	})
	if err != nil {
		return err
	}
	p.browser = browser

	return nil
}

// cleanup closes browser and playwright
func (p *Parser) cleanup() {
	if p.browser != nil {
		p.browser.Close()
	}
	if p.playwright != nil {
		p.playwright.Stop()
	}
}

// parseProductList parses the product list from a page
func (p *Parser) parseProductList(pageNumber int) ([]models.BasicProduct, bool, error) {
	context, err := p.browser.NewContext(playwright.BrowserNewContextOptions{
		Viewport: &playwright.Size{
			Width:  p.config.Parser.Browser.Viewport.Width,
			Height: p.config.Parser.Browser.Viewport.Height,
		},
		UserAgent: &p.config.Parser.Browser.UserAgent,
	})
	if err != nil {
		return nil, false, err
	}
	defer context.Close()

	page, err := context.NewPage()
	if err != nil {
		return nil, false, err
	}

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–º–µ—Ä–æ–º
	url := fmt.Sprintf("%s?page=%d", p.config.Parser.BaseURL, pageNumber)
	log.Printf("Loading page: %s", url)

	response, err := page.Goto(url, playwright.PageGotoOptions{
		WaitUntil: playwright.WaitUntilStateDomcontentloaded,
		Timeout:   playwright.Float(float64(p.config.Parser.Browser.Timeout)),
	})
	if err != nil {
		return nil, false, err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if response.Status() == 404 {
		log.Printf("  Page %d returned 404, no more pages", pageNumber)
		return nil, false, nil
	}

	// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
	_, err = page.WaitForSelector(p.config.Parser.Selectors.ProductCards, playwright.PageWaitForSelectorOptions{
		Timeout: playwright.Float(10000),
	})
	if err != nil {
		log.Printf("  No products found on page %d", pageNumber)
		return nil, false, nil
	}

	// –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
	p.scrollPage(page)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã
	products := p.extractProductCards(page)

	if len(products) == 0 {
		log.Printf("  No products extracted from page %d", pageNumber)
		return nil, false, nil
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
	hasNextPage := p.hasNextPage(len(products), pageNumber)

	return products, hasNextPage, nil
}

// scrollPage scrolls the page to load all products
func (p *Parser) scrollPage(page playwright.Page) {
	scrollDelay := time.Duration(p.config.Parser.Parsing.ScrollDelay) * time.Millisecond
	maxScrolls := p.config.Parser.Parsing.MaxScrolls

	log.Println("Scrolling page to load all products...")

	var lastHeight float64
	stableCount := 0

	for i := 0; i < maxScrolls; i++ {
		// –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
		page.Evaluate("window.scrollBy(0, 500)")
		time.Sleep(scrollDelay)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤—ã—Å–æ—Ç–∞
		heightResult, err := page.Evaluate("document.body.scrollHeight")
		if err != nil {
			break
		}

		var currentHeight float64
		switch h := heightResult.(type) {
		case int:
			currentHeight = float64(h)
		case int64:
			currentHeight = float64(h)
		case float64:
			currentHeight = h
		case float32:
			currentHeight = float64(h)
		default:
			currentHeight = 0
		}

		if currentHeight == lastHeight {
			stableCount++
			if stableCount >= 3 {
				break
			}
		} else {
			stableCount = 0
		}

		lastHeight = currentHeight
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–≤–µ—Ä—Ö
	page.Evaluate("window.scrollTo(0, 0)")
	time.Sleep(time.Second)
}

// extractProductCards extracts product information from page
func (p *Parser) extractProductCards(page playwright.Page) []models.BasicProduct {
	cards, err := page.QuerySelectorAll(p.config.Parser.Selectors.ProductCards)
	if err != nil {
		log.Printf("Error querying product cards: %v", err)
		return nil
	}

	var products []models.BasicProduct

	for _, card := range cards {
		title, err := card.GetAttribute("title")
		if err != nil || title == "" {
			continue
		}

		href, err := card.GetAttribute("href")
		if err != nil || href == "" {
			continue
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL
		re := regexp.MustCompile(`/pl/(\d+-\d+)/`)
		matches := re.FindStringSubmatch(href)
		if len(matches) < 2 {
			continue
		}

		productID := matches[1]

		// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
		fullURL := href
		if !strings.HasPrefix(href, "http") {
			fullURL = "https://www.pricerunner.com" + href
		}

		products = append(products, models.BasicProduct{
			ID:    productID,
			Title: title,
			URL:   fullURL,
		})
	}

	return products
}

// hasNextPage checks if there's a next page based on product count
func (p *Parser) hasNextPage(productsCount int, pageNumber int) bool {
	log.Printf("  Checking if page %d has next page...", pageNumber)

	// –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ–º –æ–±—ã—á–Ω–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	expectedProductsPerPage := 48

	if productsCount < expectedProductsPerPage {
		log.Printf("    Found only %d products (expected ~%d), likely last page", productsCount, expectedProductsPerPage)
		return false
	}

	// –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	if p.config.Parser.Parsing.MaxPages > 0 && pageNumber >= p.config.Parser.Parsing.MaxPages {
		log.Printf("    Reached max pages limit (%d)", p.config.Parser.Parsing.MaxPages)
		return false
	}

	log.Printf("    ‚úì Page %d has %d products, assuming next page exists", pageNumber, productsCount)
	return true
}

// filterExistingProducts filters out products that already exist
func (p *Parser) filterExistingProducts(products []models.BasicProduct) ([]models.BasicProduct, error) {
	existingIDs, err := p.storage.GetExistingProducts()
	if err != nil {
		return products, err // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
	}

	existingSet := make(map[string]bool)
	for _, id := range existingIDs {
		existingSet[id] = true
	}

	var newProducts []models.BasicProduct
	for _, product := range products {
		if !existingSet[product.ID] {
			newProducts = append(newProducts, product)
		}
	}

	return newProducts, nil
}

// parseProductDetails gets detailed information for each product
func (p *Parser) parseProductDetails(products []models.BasicProduct) []models.Product {
	var detailedProducts []models.Product

	for i, basicProduct := range products {
		log.Printf("[%d/%d] Processing: %s (ID: %s)", i+1, len(products),
			truncateString(basicProduct.Title, 50), basicProduct.ID)

		details, err := p.parseProductDetail(basicProduct)
		if err != nil {
			log.Printf("  ‚úó Failed to parse details: %v", err)
			continue
		}

		detailedProducts = append(detailedProducts, *details)

		// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		var stats []string

		if details.Price != nil && details.Price.PriceEUR > 0 {
			stats = append(stats, fmt.Sprintf("Price: ‚Ç¨%.2f", details.Price.PriceEUR))
		}

		if details.ImageLocal != "" {
			stats = append(stats, "Image: ‚úì")
		}

		if len(details.Features) > 0 {
			stats = append(stats, fmt.Sprintf("Features: %d", len(details.Features)))
		}

		if len(details.ExtraImages) > 0 {
			stats = append(stats, fmt.Sprintf("ExtraImg: %d", len(details.ExtraImages)))
		}

		// –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
		if len(stats) > 0 {
			log.Printf("  ‚úì %s", strings.Join(stats, ", "))
		}

		// –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
		time.Sleep(time.Duration(p.config.Parser.Parsing.DelayBetweenRequests) * time.Millisecond)
	}

	return detailedProducts
}

// parseProductDetail parses detailed information for a single product
func (p *Parser) parseProductDetail(basic models.BasicProduct) (*models.Product, error) {
	context, err := p.browser.NewContext(playwright.BrowserNewContextOptions{
		Viewport: &playwright.Size{
			Width:  p.config.Parser.Browser.Viewport.Width,
			Height: p.config.Parser.Browser.Viewport.Height,
		},
		UserAgent: &p.config.Parser.Browser.UserAgent,
	})
	if err != nil {
		return nil, err
	}
	defer context.Close()

	page, err := context.NewPage()
	if err != nil {
		return nil, err
	}

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
	if _, err := page.Goto(basic.URL, playwright.PageGotoOptions{
		WaitUntil: playwright.WaitUntilStateDomcontentloaded,
		Timeout:   playwright.Float(float64(p.config.Parser.Browser.Timeout)),
	}); err != nil {
		return nil, err
	}

	// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
	time.Sleep(500 * time.Millisecond)

	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	p.scrollToFeatures(page)

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞
	product := &models.Product{
		ID:        basic.ID,
		Title:     basic.Title,
		URL:       basic.URL,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	// –ü–∞—Ä—Å–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
	product.Price = p.parsePrice(page)
	p.parseMainImage(page, product)
	product.ExtraImages = p.parseAdditionalImages(page, basic.ID)
	product.Features = p.parseFeatures(page)

	return product, nil
}

// scrollToFeatures —É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
func (p *Parser) scrollToFeatures(page playwright.Page) {
	log.Printf("  Loading all page content...")

	// –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

	// 1. –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	page.Evaluate("window.scrollTo(0, document.body.scrollHeight)")
	time.Sleep(1 * time.Second)

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü—ã
	tablesCount := p.checkTablesCountQuick(page)
	log.Printf("    After full scroll: %d tables found", tablesCount)

	// 3. –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –º–∞–ª–æ, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
	if tablesCount < 2 {
		log.Printf("    Need more content, doing additional scrolling...")

		// –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–∞–∑–Ω—ã–º —á–∞—Å—Ç—è–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		positions := []string{
			"document.body.scrollHeight * 0.75", // 75%
			"document.body.scrollHeight * 0.5",  // 50%
			"document.body.scrollHeight * 0.25", // 25%
		}

		for _, pos := range positions {
			page.Evaluate(fmt.Sprintf("window.scrollTo(0, %s)", pos))
			time.Sleep(500 * time.Millisecond)
		}

		// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É
		page.Evaluate("window.scrollTo(0, document.body.scrollHeight)")
		time.Sleep(1 * time.Second)
	}

	// 4. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º—Å—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	page.Evaluate("window.scrollTo(0, document.body.scrollHeight / 2)")
	time.Sleep(500 * time.Millisecond)

	finalCount := p.checkTablesCountQuick(page)
	log.Printf("    Final: %d tables loaded", finalCount)
}

// checkTablesCountQuick –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–∏—Ü
func (p *Parser) checkTablesCountQuick(page playwright.Page) int {
	// –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
	tables, err := page.QuerySelectorAll(p.config.Parser.Selectors.FeatureTables)
	if err == nil && len(tables) > 0 {
		return len(tables)
	}

	// –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
	altSelectors := []string{
		"table.pr-1regpt0-Table-table",
		"div[class*='Table'] table",
		"table",
	}

	maxCount := 0
	for _, selector := range altSelectors {
		tables, err := page.QuerySelectorAll(selector)
		if err == nil && len(tables) > maxCount {
			maxCount = len(tables)
		}
	}

	return maxCount
}

// parsePrice parses price using the improved selector for second span
func (p *Parser) parsePrice(page playwright.Page) *models.PriceInfo {
	log.Printf("    Looking for price (second span)...")

	// –°–ø–æ—Å–æ–± 1: –ò—â–µ–º –≤—Å–µ span'—ã —Å –Ω—É–∂–Ω—ã–º –∫–ª–∞—Å—Å–æ–º –∏ –±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π
	priceElements, err := page.QuerySelectorAll("span.pr-1fcg5be")
	if err != nil || len(priceElements) < 2 {
		log.Printf("    Not enough price elements found (need 2, got %d)", len(priceElements))
		return p.parsePriceFallback(page)
	}

	// –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç (–∏–Ω–¥–µ–∫—Å 1)
	secondPriceElement := priceElements[1]

	priceText, err := secondPriceElement.InnerText()
	if err != nil || priceText == "" {
		log.Printf("    Failed to get text from second price element")
		return p.parsePriceFallback(page)
	}

	priceText = strings.TrimSpace(priceText)
	log.Printf("    Found price (second span): %s", priceText)

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ EUR
	priceEUR := p.convertGBPToEUR(priceText)

	return &models.PriceInfo{
		PriceGBP: priceText,
		PriceEUR: priceEUR,
	}
}

// parsePriceFallback - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã
func (p *Parser) parsePriceFallback(page playwright.Page) *models.PriceInfo {
	log.Printf("    Trying fallback price selectors...")

	// –°–ø–æ—Å–æ–± 2: –ò—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É "Lowest Price Now"
	nowPriceSelector := `//p[contains(text(), "Lowest Price Now")]/following-sibling::span[@class="pr-1fcg5be"]`
	if priceElement, err := page.QuerySelector(nowPriceSelector); err == nil && priceElement != nil {
		if priceText, err := priceElement.InnerText(); err == nil && priceText != "" {
			log.Printf("    Found price via 'Lowest Price Now': %s", strings.TrimSpace(priceText))
			return &models.PriceInfo{
				PriceGBP: strings.TrimSpace(priceText),
				PriceEUR: p.convertGBPToEUR(priceText),
			}
		}
	}

	// –°–ø–æ—Å–æ–± 3: –ò—â–µ–º –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ DOM - –≤—Ç–æ—Ä–æ–π div —Å –∫–ª–∞—Å—Å–æ–º pr-i5pc8s
	structureSelector := `div.pr-1ymxntz div.pr-i5pc8s:nth-child(2) span.pr-1fcg5be`
	if priceElement, err := page.QuerySelector(structureSelector); err == nil && priceElement != nil {
		if priceText, err := priceElement.InnerText(); err == nil && priceText != "" {
			log.Printf("    Found price via structure selector: %s", strings.TrimSpace(priceText))
			return &models.PriceInfo{
				PriceGBP: strings.TrimSpace(priceText),
				PriceEUR: p.convertGBPToEUR(priceText),
			}
		}
	}

	log.Printf("    ‚ö† No price found with any method")
	return nil
}

// convertGBPToEUR converts GBP price to EUR
func (p *Parser) convertGBPToEUR(priceStr string) float64 {
	// –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª—ã
	re := regexp.MustCompile(`[¬£‚Ç¨\s,]`)
	cleanPrice := re.ReplaceAllString(priceStr, "")

	price, err := strconv.ParseFloat(cleanPrice, 64)
	if err != nil {
		return 0
	}

	return price * p.config.Currency.GBPToEUR
}

// parseMainImage parses the main product image
func (p *Parser) parseMainImage(page playwright.Page, product *models.Product) {
	log.Printf("  Looking for images...")

	selectors := []string{
		p.config.Parser.Selectors.MainImage,
		"picture.pr-lpjxdi source[type='image/jpeg']",
		"img[itemprop='image']",
		"div.pr-15dcama img",
	}

	var imageURL string

	for _, selector := range selectors {
		if strings.Contains(selector, "source") {
			source, err := page.QuerySelector(selector)
			if err == nil && source != nil {
				srcset, _ := source.GetAttribute("srcset")
				if srcset != "" {
					urls := strings.Split(srcset, ",")
					if len(urls) > 0 {
						imageURL = strings.TrimSpace(strings.Fields(urls[len(urls)-1])[0])
						break
					}
				}
			}
		} else {
			img, err := page.QuerySelector(selector)
			if err == nil && img != nil {
				srcset, _ := img.GetAttribute("srcset")
				if srcset != "" {
					urls := strings.Split(srcset, ",")
					if len(urls) > 0 {
						imageURL = strings.TrimSpace(strings.Fields(urls[len(urls)-1])[0])
						break
					}
				} else {
					src, _ := img.GetAttribute("src")
					if src != "" && !strings.HasPrefix(src, "data:") {
						imageURL = src
						break
					}
				}
			}
		}
	}

	product.ImageURL = imageURL

	if imageURL != "" {
		localPath, err := p.downloader.DownloadImage(imageURL, product.ID)
		if err != nil {
			log.Printf("    ‚úó Failed to download main image: %v", err)
		} else {
			product.ImageLocal = localPath
		}
	} else {
		log.Printf("    ‚ö† Main image not found")
	}
}

// parseAdditionalImages parses additional product images
func (p *Parser) parseAdditionalImages(page playwright.Page, productID string) []models.ImageInfo {
	log.Printf("  Looking for additional images...")

	thumbnails, err := page.QuerySelectorAll(p.config.Parser.Selectors.AdditionalImages)
	if err != nil {
		return nil
	}

	var additionalImages []models.ImageInfo
	maxImages := 3 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏

	for i, thumb := range thumbnails {
		if i >= maxImages {
			break
		}

		src, err := thumb.GetAttribute("src")
		if err != nil || src == "" || strings.HasPrefix(src, "data:") {
			continue
		}

		// –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –±–æ–ª—å—à–∏–π
		re := regexp.MustCompile(`/dim/dim/`)
		largeURL := re.ReplaceAllString(src, "/504x504/")

		localPath, err := p.downloader.DownloadImage(largeURL, fmt.Sprintf("%s_extra_%d", productID, i+1))
		if err != nil {
			log.Printf("    ‚úó Failed to download additional image %d: %v", i+1, err)
			continue
		}

		additionalImages = append(additionalImages, models.ImageInfo{
			URL:   largeURL,
			Local: localPath,
		})
	}

	return additionalImages
}

// parseFeatures –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏
func (p *Parser) parseFeatures(page playwright.Page) map[string]string {
	log.Printf("  Extracting features...")

	features := make(map[string]string)

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü
	tableSelectors := []string{
		p.config.Parser.Selectors.FeatureTables, // –û—Å–Ω–æ–≤–Ω–æ–π
		"table.pr-1regpt0-Table-table",          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
		"div[class*='Table'] table",             // –ü–æ —á–∞—Å—Ç–∏ –∫–ª–∞—Å—Å–∞
		"table",                                 // –õ—é–±—ã–µ —Ç–∞–±–ª–∏—Ü—ã
	}

	var tables []playwright.ElementHandle

	for _, selector := range tableSelectors {
		foundTables, err := page.QuerySelectorAll(selector)
		if err == nil && len(foundTables) > 0 {
			tables = foundTables
			log.Printf("    Found %d tables with selector: %s", len(foundTables), selector)
			break
		}
	}

	if len(tables) == 0 {
		log.Printf("    ‚ö† No feature tables found with any selector")
		return features
	}

	// –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
	for tableIdx, table := range tables {
		log.Printf("    Processing table %d/%d", tableIdx+1, len(tables))

		// –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
		tableFeatures := p.parseTableWithMultipleHeaders(table)

		// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ–±—â–∏–º —Å–ø–∏—Å–∫–æ–º
		for key, value := range tableFeatures {
			features[key] = value
		}
	}

	if len(features) > 0 {
		log.Printf("    ‚úì Total features found: %d", len(features))
	} else {
		log.Printf("    ‚ö† No valid features extracted")
	}

	return features
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º parseTableWithMultipleHeaders - —É–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
func (p *Parser) parseTableWithMultipleHeaders(table playwright.ElementHandle) map[string]string {
	features := make(map[string]string)

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–∏ thead, –∏ tbody)
	allRows, err := table.QuerySelectorAll("tr")
	if err != nil {
		return features
	}

	currentCategory := "General"

	for _, row := range allRows { // –£–±—Ä–∞–ª–∏ i, _
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
		if p.isHeaderRow(row) {
			// –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
			category := p.extractCategoryFromHeaderRow(row)
			if category != "" {
				currentCategory = category
				log.Printf("      Found category header: '%s'", currentCategory)
			}
			continue
		}

		// –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –ø–∞—Ä—Å–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
		featureName, featureValue := p.extractFeatureFromRow(row)
		if featureName != "" && featureValue != "" {
			// –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –∑–Ω–∞—á–∏–º–∞—è
			key := featureName
			if currentCategory != "General" && currentCategory != "" {
				key = fmt.Sprintf("%s: %s", currentCategory, featureName)
			}

			features[key] = featureValue
		}
	}

	log.Printf("      Extracted %d features from table", len(features))
	return features
}

// isHeaderRow –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
func (p *Parser) isHeaderRow(row playwright.ElementHandle) bool {
	// –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (thead)
	script := "\n\t\t\t\tlet row = arguments[0];\n\t\t\t\tlet parent = row.parentElement;\n\t\t\t\treturn parent && parent.tagName === 'THEAD';\n\t\t"
	if result, err := row.Evaluate(script); err == nil {
		if isInThead, ok := result.(bool); ok && isInThead {
			return true
		}
	}

	// –°–ø–æ—Å–æ–± 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ th –≤–º–µ—Å—Ç–æ td
	ths, err := row.QuerySelectorAll("th")
	if err == nil && len(ths) > 0 {
		return true
	}

	// –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –∫–ª–∞—Å—Å –∏–ª–∏ data-–∞—Ç—Ä–∏–±—É—Ç—ã
	class, _ := row.GetAttribute("class")
	dataKind, _ := row.GetAttribute("data-kind")

	if strings.Contains(class, "heading") || strings.Contains(class, "header") ||
		dataKind == "heading" || dataKind == "header" {
		return true
	}

	// –°–ø–æ—Å–æ–± 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫–∏ —Å data-kind="heading"
	cells, err := row.QuerySelectorAll("td, th")
	if err == nil {
		for _, cell := range cells {
			if cellDataKind, _ := cell.GetAttribute("data-kind"); cellDataKind == "heading" {
				return true
			}
		}
	}

	return false
}

// extractCategoryFromHeaderRow –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
func (p *Parser) extractCategoryFromHeaderRow(row playwright.ElementHandle) string {
	// –ò—â–µ–º div.pr-f8aw3g —Å —Ç–µ–∫—Å—Ç–æ–º
	if categoryDiv, err := row.QuerySelector("div.pr-f8aw3g"); err == nil && categoryDiv != nil {
		if categoryText, err := categoryDiv.InnerText(); err == nil && categoryText != "" {
			cleaned := strings.TrimSpace(categoryText)
			if p.isValidCategory(cleaned) {
				return cleaned
			}
		}
	}

	// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - –∏—â–µ–º –≤ th
	if th, err := row.QuerySelector("th"); err == nil && th != nil {
		if categoryText, err := th.InnerText(); err == nil && categoryText != "" {
			cleaned := strings.TrimSpace(categoryText)
			if p.isValidCategory(cleaned) {
				return cleaned
			}
		}
	}

	// –ò—â–µ–º –≤ –ª—é–±–æ–π —è—á–µ–π–∫–µ
	cells, err := row.QuerySelectorAll("td, th")
	if err == nil && len(cells) > 0 {
		if categoryText, err := cells[0].InnerText(); err == nil && categoryText != "" {
			cleaned := strings.TrimSpace(categoryText)
			if p.isValidCategory(cleaned) {
				return cleaned
			}
		}
	}

	return ""
}

// extractFeatureFromRow –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
func (p *Parser) extractFeatureFromRow(row playwright.ElementHandle) (string, string) {
	// –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ td (–Ω–µ th)
	cells, err := row.QuerySelectorAll("td")
	if err != nil || len(cells) < 2 {
		return "", ""
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
	featureName, _ := cells[0].InnerText()
	featureValue, _ := cells[1].InnerText()

	featureName = strings.TrimSpace(featureName)
	featureValue = strings.TrimSpace(featureValue)

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if !p.isValidFeaturePair(featureName, featureValue) {
		return "", ""
	}

	return featureName, featureValue
}

// isValidCategory –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
func (p *Parser) isValidCategory(category string) bool {
	if len(category) < 2 || len(category) > 50 {
		return false
	}

	// –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	excludes := []string{",", " ", "-", "‚Äì", "‚Äî", "N/A", "n/a", "TBD", "tbd"}
	for _, exclude := range excludes {
		if category == exclude {
			return false
		}
	}

	return true
}

// isValidFeaturePair –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–µ-–∑–Ω–∞—á–µ–Ω–∏–µ
func (p *Parser) isValidFeaturePair(name, value string) bool {
	if name == "" || value == "" {
		return false
	}

	if name == value {
		return false
	}

	if len(name) < 2 || len(value) < 1 {
		return false
	}

	// –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
	if strings.Contains(strings.ToLower(name), "compare") {
		return false
	}

	return true
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é truncateString –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}
