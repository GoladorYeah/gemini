[User Browser / Frontend Next.js]
       │
       Дизайн: как chatGpt
       ▼
[User Input Search Query]
       ├─ автоматическое Определение языка: en
       ├─ автоматическое Определение региона: US
       └─ Формирование запроса:
       Example 1:
           {
             "query": "New Balance Little Kid's 530 Bungee", Тут у нас полное название товара на английском
             "lang": "en",
             "region": "US"
           }
       Example 2:
           {
             "query": "Кроссовки для малышей New Balance 530 Bungee", Кроссовки для малышей - это уточнение, чтобы AI лучше понял запрос
             "lang": "ru",
             "region": "RU"
           }
           Example 3:
           {
             "query": "Apple iPhone 16",
             "lang": "en",
             "region": "US"
           }
       │
       ▼
[Go Backend API] — получение запроса
       │
       ├─► [AI Normalizer Service Gemini + key rotation] — нормализация запроса (если нужно), улучшаем title, определяем category и features. Если запрос на другом языке, то переводим на английский. Если запрос прям вообще не о товаре, то просим утонить запрос.
       │        │
       │        ▼
       │   JSON:
       Example 1:
       │   {
       │     "title": "New Balance Little Kid's 530 Bungee",
       │     "category": "Kids Shoes",
       │     "features": ["bungee", "easy on/off","brand: New Balance"], - опционально может отличаться в зависимости от категории товара
       │   }
       Example 2:
       │   {
       │     "title": "Apple iPhone 16 Pro Max, 256GB Desert Titanium",
       │     "category": "Smartphones",
       │     "features": ["256GB", "color: Desert Titanium", "brand: Apple"],
       │   }

       ├─► [Meilisearch] — поиск топ-10 товаров по title + features + category
       │        │
       │        └─► Результат:
       │             1. New Balance Little Kid's 530 Bungee - Moonbeam/Phantom
       │             2. New Balance Little Kid's 530 Bungee - Blue/White
       │             3. New Balance Little Kid's 530 Bungee - Pink
       │             ...
       │
       └─► Для каждого товара проверка google_product_id
               ├─ Есть → ничего не делаем
               └─ Нет → формируем serpapi_query по title:
                   - "New Balance Little Kid's 530 Bungee"
                   - "New Balance Little Kid's 530 Bungee Blue White"
                   - "New Balance Little Kid's 530 Bungee Pink"
       │
       ▼
[Frontend] — вывод топ-10 товаров пользователю в виде списка с картинкой, названием
       │ 
       │
       ▼
[User Clicks on Product] — пользователь кликает на товар, чтобы увидеть детальную карточку(картинка, название,спецификация и кнопка "Показать цены и магазины")
       │
       [Go Backend API] — получение детальной карточки товара по id из Meilisearch или PostgreSQL (они должны быть синхронизированы)
       │
       ▼
       клик кнопка "Показать цены и магазины"
       │
       │
       ▼
[Go Backend API] 
       │
       ├─ Проверка google_product_id
       │       ├─ Нет → SerpApi по serpapi_query
       │       │       ├─ Берём первый результат position=1
       │       │       ├─ Берём google_product_id
       │       │       └─ Сохраняем google_product_id
       │       └─ Есть → пропускаем первый шаг
       │
       └─ SerpApi по google_product_id → получаем:
               - мерчанты
               - цены
               - ссылки
       │
       ▼
[Redis Cache] — кэшируем результаты (мерчанты, цены, ссылки) на 1 день
       │
       ▼
[Frontend] — отображение мерчантов, цен, ссылок в карточке товара
       │
       ▼детальную страницу товара можна свайпом вниз или слева свернуть в нижний правый угол (как видео на YouTube) и вернуться к списку товаров




Parser PriceRunner: тут парсер /goladoryeah-mylittleprice-d839dd8cddf65c90.txt
       │
       ▼Парсер PriceRunner нужно доработать, чтоб через админку можна было указывать URL для парсинга и категорию товара - запускать и останавливать парсер
       │
       ├─ Ежедневный парсинг цен с PriceRunner (или другого источника) для обновления базы товаров и цен
       └─ Обновление PostgreSQL и Meilisearch новыми товарами и ценами
       │
       ▼Нужно чтоб пасером можно было управлять из админки или интегрировать парсер в проект
[Admin Panel / Frontend Next.js + Go Backend API]
       │
       ├─ Управление API ключами SerpApi и AI Normalizer Service Gemini
       ├─ Просмотр логов запросов и ошибок
       ├─ Управление товарами в базе (добавление, удаление, редактирование)
       └─ Просмотр статистики использования (количество запросов, популярные товары и т.д.)
       │
       ▼